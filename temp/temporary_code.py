"""

The code for creating, deleting, and otherwise
managing temporary code and the
related temporary files

"""

import envtemp
import tempfile
import pathlib
import os

boilerplate_template="""\
\"\"\"
This is an automatically generated 
file produces by preprocessing. This
file is designed to be run within
the namespace it was called in.

Do not edit this file.

DEBUG_INFO:

This file was created from a file located at: {path}
This file was created at time: {time}

The environmental variables present 
upon creation are:

{environmentals}
\"\"\"
"""


#This template is used to generate inline
#function auxiliary code.



tempfile_boilerplate="""\
\"\"\"
This is an automatically generated 
file produces by preprocessing. This
file is designed to be run within
the namespace it was called in.

Do not edit this file.

DEBUG_INFO:

This file was created from a file located at: {path}
This file was created at time: {time}

The environmental variables present 
upon creation are:

{environmentals}
\"\"\"
"""

class


class TempCodeFile():
    """

    A representation of a temporary file.

    Responsible for constructing the file
    file with it's content and cleaning it up
    later upon GC

    Calling the class with an environment will
    execute the file as though it was a module
    with the same imports as the environment.

    The return will then be a module
    """
    @property
    def path(self):
        return self.temp_handle.name
    @property
    def filename(self):
        path = pathlib.Path(self.temp_handle.name)
        return path.name
    def __init__(self, source: str):
        #Setup and store handles
        assert isinstance(source, str)
        self.temp_handle = tempfile.NamedTemporaryFile(mode="a+", suffix=".py", delete=False)
        self.source = source
        try:
            self.setup()
        except Exception as err:
            self.temp_handle.close()
            os.remove(self.temp_handle.name)
            raise err


    def __del__(self):
        self.temp_handle.close()
        os.remove(self.temp_handle.name)
    def __call__(self, environment: envtemp.EnvProxy):
        starting_env = environment.names


class tempCode

class CodeStub():
    """
    A container in which temporary code can be placed.

    May be called, in which case it will execute the contents of
    a temporary file within the environment it was initialized with.

    It then returns a module mockup
    """

    def __init__(self, env: envtemp.EnvProxy):
        self.env = env
        self.code = []
